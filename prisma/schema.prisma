// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  isVerified     Boolean          @default(false)
  oauthProvider  String?
  oauthId        String?
  refreshTokens  RefreshToken[]
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  subscription        Subscription?
  emailVerifications  EmailVerification[]
  avatarUrl           String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  images    String[]
  emoticons String[]
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  post      Post   @relation(fields: [postId], references: [id])
  postId    Int
  isLike    Boolean
}

model Subscription {
  id         Int      @id @default(autoincrement())
  tier       String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
}
